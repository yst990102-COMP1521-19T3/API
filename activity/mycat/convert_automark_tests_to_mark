#!/usr/bin/python3
import re, sys

def main():
	(passed, failed, not_run) = parse_automarking_results()
	if not passed + failed + not_run:
		return
	mark = piece_wise_linear(passed,  {56 : 100, 0:20})
	#print( passed, failed, not_run, mark)
	print()
	print("Mark for automarking tests: %.1f/100" % mark)

def parse_automarking_results(stream=sys.stdin):
	summary_lines = []
	for line in sys.stdin:
		sys.stdout.write(line)
		if re.match(r'^\d+ tests passed ', line):
			summary_lines.append(line)
	if not summary_lines:
		return (0, 0, 0)
	summary_line = summary_lines[-1]
	summary_line = re.sub(r'\s+', ' ', summary_line)
	(passed, failed, not_run) = (0, 0, 0)
	m = re.search(r'(\d+) tests passed', summary_line)
	if m:
		passed = int(m.group(1))
	m = re.search(r'(\d+) tests failed', summary_line)
	if m:
		failed = int(m.group(1))
	m = re.search(r'(\d+) tests could', summary_line)
	if m:
		not_run = int(m.group(1))
	return (passed, failed, not_run)

def piece_wise_linear(x, mapping):
	if isinstance(mapping, dict):
		mapping = mapping.items()
	mapping = sorted(mapping)
	x0, mapped_x0 = mapping.pop(0)
	if x < x0:
		return mapped_x0
	while mapping:
		x1, mapped_x1 = mapping.pop(0)
		if x <= x1:
			return mapped_x0 + (x - x0)/(x1 - x0) * (mapped_x1 - mapped_x0)
		x0, mapped_x0 = x1, mapped_x1
	return mapped_x0


if __name__ == "__main__":
	main()
