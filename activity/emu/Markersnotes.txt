
*** Marking Instructions for Assignment 1

Please read the assignment spec at:
https://cgi.cse.unsw.edu.au/~cs1521/19T3/assignments/ass1/index.html

186 tests (91 part 1, 95 part 2)
were used to create an auto-testing mark out of 80 in a piecewise linear manner:

passing  30 tests => 44/80
passing  91 tests => 56/80
passing 186 tests => 80/80



*** Adjusting Performance Marks

Students may contact you saying a single mistake has had a large impact.
If a single mistake has had a *large* impact (> 10% > 8/80) on a students
performance mark you can adjust the performance mark so the impact is ~10% (8/80)


*** Marking Schemes


My philosphy is that assignment marks should have a similar distribution
to subject final marks.  So a student who gets 50% for the assignment
is, on the basis of their assignment, heading for a borderline pass/fail
in the subject.  A mark of 90% is high achievement and indicates the
student is on track for a HD.

If a single error has a large impact say 10+% you can amend their
performance mark to one that you think is fair.

In occasional cases you may want to edit their code and rerun automarking.

You can download via 
https://cgi.cse.unsw.edu.au/~cs1521/19T3/student/
and then
1521 automark emu



*** Minimum Marks for Assignment 1 

Two submissions don't compile.  All other assignment passed 34+ tests and only a few passed < 60 tests.
 
For the two submissions that don't compile.
The *overall* mark such an assignment should achieve is specified
below.  In borderline cases the first marking scheme may produce
a slightly higher mark , if so use the higher mark.

You will need to manually alter the performance mark
to achieve the specified total marks - you can do this just by
clicking on the performance mark.  You ignore the previous style
marking guidelines - just choose a style mark necessary
to produce the overall mark specified below.

50/100 Part 1 is mostly implemented and with some advice and minor bug fixes it would pass
       multiple part 1 tests.

45/100 More than half the code to handle some instruction in part 1 is implemented with sensible C but there are major bugs
       or missing bits.

40/100 The student has understood the assignment and  made some progress on  code to handle some instruction in part 1

30/100 The student has understood the assignment and  submitted some relevant C

01/100 The student has submitted anything


*** Style Mark out of 20
Your task is to award a style mark out of 20 and give them some
feedback about their coding style.

You are not assessing the strategy used or the efficiency of the code.

You are assessing only how easy their code is for a human to read and
understand. 

Style marking should be more generous for assignments with weak performance marks.
However definitely paste in a comment indicating the deficit.

Its OK if they use features discouraged in COMP1[59]11 such as switch statements.
COMP1521 style guide here: https://cgi.cse.unsw.edu.au/~cs1521/19T3/resources/cs1521.style_guide.html
Ask on slack if in doubt

Here is how you should allocate the style mark:

    20/20  A serious and mostly successful effort has been made to make
    the program easy for a human to read.  All the criteria below are
    met or close to met, or all but 1 of the criteria are well met and 1 is poorly done

    a) There is a good header comment containing information
       such as  name, date, description of program
       Don't penalize the student if instead this information is
       supplied elsewhere in the file but give them feedback about placement

    b) There is consistent sensible indenting - they are not required to use
       the course indenting scheme. Definitely don't penalized them
       for using one of the ~10 other indenting-scheme for C-like languages
       but indenting must be sensible and consistent.

       xmark assumes 8-space tabs which will be disastrous if they mix tabs and spaces
       If xmark is unreadable try viewing via:
          https://cgi.cse.unsw.edu.au/~cs1521/19T3/flask_tutors.cgi/student/
          which assumes 4 space tabs

    c) Blank lines & whitespace are used effectively to assist readability

    d) Variables names are well chosen to assist readability

    e) Code has been appropriately decomposed into appropriately named functions of mostly < 20 lines
       There are not 100+ line functions *which could be easily decomposed*.
       These functions have well-chosen names, and comments preceding or associated
       with the function describe its purpose.
       This is difficult for this assignment
       so you can be generous in assessing this criteria but again supply feedback.

    f) Extra #defines (or enums) with sensible names have been added as needed
       This is a difficult assignment for this because some values which occur only
       once are arguably (with some approaches) better left as raw constants in the code,
       so be generous here.  But however they approach somethings should be #defines.
       
    It is ok if the program has a few flaws if the above goals
    are largely met.  I hope >25% of submissions  will meet this goal.


    17/20  A serious effort has been made to make the program readable
    but there is an obvious failing.  1 of the criteria above is clearly not
    met or 2 criteria are only partly met but the program is still readable.
    I hope >50% of submissions will achieve at least this standard.


    15/20  2 of the criteria above are clearly not or 3-4 criteria are only partly met
    but the program is still some what readable.
 
 
    13/20  3 of the criteria above are clearly not met or 5-6 criteria are only partly met
    but some effort made towards readibility.
 
    10/20  4 of the criteria above are clearly not met
 
     7/20  5 of the criteria above are clearly not met
 

     0/20   The program is really ugly, unindented, impossible to read and has no
    comments. I hope there are no assignments in this category.

* definitely discuss style marking on slack if in doubt
  
* Don't make the style mark negative.

* You may award intermediate style marks such as 13.7/20 if you wish.

* You can make negative comments indicating minor failings without
  deducting marks. In fact, you are encouraged to do this.
